version: 0.2
phases:
  install: # Install AWS cli, kubectl (needed for Helm) and Helm
    commands:
       - apt-get update -y
       - apt install -y awscli git python3
       - echo installation of awscli git and python completed on `date`
       - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator
       - echo Download IAM Authenticator completed on `date`
       - chmod +x ./aws-iam-authenticator
       - echo Added Execute Permissions to IAM Authenticator completed on `date`
       - mkdir -p ~/bin && cp ./aws-iam-authenticator ~/bin/aws-iam-authenticator && export PATH=~/bin:$PATH
       - echo Copied IAM Authenticator to Bin completed on `date`
       - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
       - echo Downlaod Kubectl completed on `date`       
       - chmod +x kubectl
       - echo Add Execute Permissions to Kubectl completed on `date`
       - mv ./kubectl /usr/local/bin/kubectl
       - echo Copy Kubectl to Bin Directory completed on `date`
       - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
       - echo Download Helm completed on `date`
       - chmod 700 get_helm.sh
       - echo Add Execute permissions to Helm Completed on `date`
       - sh ./get_helm.sh
       - echo Pre-requisites Installation For Kubernetes - awscli - git - python3 - aws-iam-authenticator - kubectl - Helm Completed Sucessfully
       - echo Installation Stage Completed
  pre_build: # Add kubeconfig to access to EKS cluster
    commands:
      - echo I AM IN Pre-Build Stage
      - "mkdir ~/.kube/"
      - echo Updating KubeConfig File
      - "aws eks update-kubeconfig --name PGE-ECM-K8s-Dev --role-arn arn:aws:iam::138871512076:role/eksCluster-Create-LambdaExecutionRole-PGE-ECM-K8s-Cluster"
      - echo Pre-Build Stage Completed
  build: # Build Docker image and tag it with the commit sha
    commands:
      - echo I AM IN Build Stage
      - docker pull nginx:latest
      - docker pull redis:latest
      - docker pull postgres:10.4
      - docker tag nginx:latest 138871512076.dkr.ecr.us-west-2.amazonaws.com/pge-ecm-k8s-repo:nginx
      - docker tag redis:latest 138871512076.dkr.ecr.us-west-2.amazonaws.com/pge-ecm-k8s-repo:redis
      - docker tag postgres:10.4 138871512076.dkr.ecr.us-west-2.amazonaws.com/pge-ecm-k8s-repo:postgres
      - echo Build Stage Completed
  post_build: # Push the Docker image to the ECR
    commands:
      - echo I AM IN Post-Build Stage
      - $(aws ecr get-login --no-include-email --region us-west-2)
      - docker push 138871512076.dkr.ecr.us-west-2.amazonaws.com/pge-ecm-k8s-repo:nginx
      - docker push 138871512076.dkr.ecr.us-west-2.amazonaws.com/pge-ecm-k8s-repo:redis
      - docker push 138871512076.dkr.ecr.us-west-2.amazonaws.com/pge-ecm-k8s-repo:postgres
      - echo Post-Build Stage Completed
      - kubectl config view
      - aws sts get-caller-identity
      - kubectl version
      - kubectl get pods -A
      - kubectl get ns -A
      - "ls -R"
      - kubectl apply -f ./nginx-deployment.yml -n frontend
      - kubectl apply -f ./redis-deployment.yml -n backend
      - kubectl apply -f ./postgres-deployment.yml -n postgres
      - kubectl apply -f ./postgres-service.yml
      - kubectl apply -f ./rback.yaml
      - kubectl apply -f ./create-tiller-ns.yaml
      - kubectl get pods -n tiller-controller1
      - kubectl get deployments -A
      - kubectl describe pvc -A
      - helm version
      - helm repo list
